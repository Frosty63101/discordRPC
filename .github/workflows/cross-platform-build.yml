name: Build and Package Electron + Flask App

on:
  push:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-windows:
    name: Windows Build
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install pyinstaller flask flask-cors
          echo Python dependencies installed.
          tree /F

      - name: Build Python binary
        run: |
          pyinstaller backend/app.spec
          echo Flask binary built.
          tree /F

      - name: Copy Flask binary to Electron location
        run: |
          if not exist build\app mkdir build\app
          xcopy /s /e /y dist\* build\app\
          echo Flask binary copied.
          tree /F

      - name: Clean PyInstaller build folder
        run: |
          if exist backend\build rmdir /s /q backend\build
          echo Cleaned PyInstaller build.
          tree /F

      - name: Install Node dependencies
        working-directory: frontend
        run: npm install

      - name: Build React frontend
        working-directory: frontend
        run: |
          call npm run build --verbose
          if exist build (
            echo CCC Build folder found in frontend!
            dir build
          ) else (
            echo XXX React 'build' directory missing inside frontend!
            dir
            exit 1
          )

      - name: Debug React build output
        run: |
          if exist frontend\build (
            echo CCC frontend\build exists
            dir frontend\build
            if exist frontend\build\index.html (
              echo CCC index.html found!
              type frontend\build\index.html
            ) else (
              echo XXX index.html missing!
            )
          ) else (
            echo XXX frontend\build does not exist!
          )

      - name: Show npm scripts and working directory
        run: |
          echo Current path: %cd%
          type frontend\package.json

      - name: Copy React build to Electron location
        run: |
          if exist frontend\build (
            if not exist resources\app\frontend\build mkdir resources\app\frontend\build
            xcopy /s /e /y frontend\build\* resources\app\frontend\build\
          ) else (
            echo React build directory not found!
            exit 1
          )
          echo React build copied.
          tree /F

      - name: Install Electron and Electron Packager
        run: npm install --save-dev electron @electron/packager

      - name: Package Electron App
        run: |
          npx @electron/packager . DiscordRPC ^
            --platform=win32 --arch=x64 --out=dist --overwrite ^
            --ignore="^/node_modules" ^
            --ignore="^/frontend/node_modules" ^
            --prune=true
          echo Electron app packaged.
          tree /F

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/DiscordRPC-win32-x64/

      - name: Upload Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/DiscordRPC-win32-x64/**/*

  build-macos:
    name: macOS Build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install pyinstaller flask flask-cors

      - name: Build Python binary
        run: pyinstaller backend/app-mac.spec

      - name: Copy Flask binary to Electron location
        run: |
          mkdir -p resources/app/build/app-mac
          cp dist/app_mac_bin resources/app/build/app-mac/app_mac_bin

      - name: Clean PyInstaller build folder
        run: rm -rf backend/build

      - name: Install Node dependencies
        run: |
          npm install
          npm run build
      
      - name: Copy React build to Electron location
        run: |
          mkdir -p resources/app/frontend/build
          cp -r frontend/build/* resources/app/frontend/build/

      - name: Package Electron App
        run: npx electron-packager . DiscordRPC \
          --platform=darwin --arch=x64 --out=dist --overwrite \
          --ignore="^/node_modules" \
          --ignore="^/frontend/node_modules" \
          --prune=true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/DiscordRPC-darwin-x64/

      - name: Upload Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/DiscordRPC-darwin-x64/**/*

  build-linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Python & dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip
          pip3 install pyinstaller flask flask-cors

      - name: Build Python binary
        run: pyinstaller backend/app-linux.spec
      
      - name: Copy Flask binary to Electron location
        run: |
          mkdir -p resources/app/build/app-linux
          cp dist/app_linux_bin resources/app/build/app-linux/app_linux_bin

      - name: Clean PyInstaller build folder
        run: rm -rf backend/build

      - name: Install Node dependencies
        run: |
          npm install
          npm run build
      
      - name: Copy React build to Electron location
        run: |
          mkdir -p resources/app/frontend/build
          cp -r frontend/build/* resources/app/frontend/build/

      - name: Package Electron App
        run: npx electron-packager . DiscordRPC \
          --platform=linux --arch=x64 --out=dist --overwrite \
          --ignore="^/node_modules" \
          --ignore="^/frontend/node_modules" \
          --prune=true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/DiscordRPC-linux-x64/

      - name: Upload Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/DiscordRPC-linux-x64/**/*
