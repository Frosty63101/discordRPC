name: Build and Package Electron + Flask App

on:
  push:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-windows:
    name: Windows Build
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install pyinstaller flask flask-cors

      - name: Build Python binary
        run: pyinstaller backend/app.spec

      - name: Copy Flask binary to Electron location
        run: |
          if not exist build\app mkdir build\app
          xcopy /s /e /y dist\* build\app\

      - name: Clean PyInstaller build folder
        run: if exist backend\build rmdir /s /q backend\build

      - name: Install Node dependencies
        working-directory: frontend
        run: npm install

      - name: Build React frontend
        working-directory: frontend
        run: |
          call npm run build --verbose

      - name: Copy React build to Electron location
        run: |
          if exist frontend\build (
            if not exist resources\app\frontend\build mkdir resources\app\frontend\build
            xcopy /s /e /y frontend\build\* resources\app\frontend\build\
          ) else (
            echo React build directory not found!
            exit 1
          )

      - name: Install Electron and Electron Packager
        run: npm install --save-dev electron @electron/packager

      - name: Package Electron App
        run: |
          npx @electron/packager . DiscordRPC ^
            --platform=win32 --arch=x64 --out=dist --overwrite ^
            --ignore="^/node_modules" ^
            --ignore="^/frontend/node_modules" ^
            --prune=true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/DiscordRPC-win32-x64/

      - name: Upload Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/DiscordRPC-win32-x64/**/*

  build-macos-x86_64:
    name: macOS Build (x86_64)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install flask flask-cors

      - name: Rebuild PyInstaller bootloader for x86_64
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller/bootloader
          python3 ./waf distclean all --target-arch=64bit
          cd ../..
          pip install ./pyinstaller

      - name: Build Python binary (x86_64)
        run: |
          export ARCHFLAGS="-arch x86_64"
          pyinstaller backend/app-mac-x86_64.spec

      - name: Copy Flask binary to Electron location
        run: |
          mkdir -p build/app-mac-x86_64
          cp -R dist/app_mac_x86_64/* build/app-mac-x86_64/
          chmod +x build/app-mac-x86_64/app_mac_bin_x86_64

      - name: Clean PyInstaller build folder
        run: rm -rf backend/build dist build/__pycache__

      - name: Install Node dependencies
        working-directory: frontend
        run: npm install

      - name: Build React frontend
        working-directory: frontend
        run: npm run build

      - name: Copy React build to Electron location
        run: |
          mkdir -p resources/app/frontend/build
          cp -r frontend/build/. resources/app/frontend/build/

      - name: Install Electron and Electron Packager
        run: npm install --save-dev electron @electron/packager

      - name: Package Electron App
        run: |
          npx electron-packager . DiscordRPC \
            --platform=darwin --arch=x64 --out=dist --overwrite \
            --ignore="^/node_modules" \
            --ignore="^/frontend/node_modules" \
            --prune=true

      - name: Strip quarantine flags & zip app
        run: |
          xattr -cr dist/DiscordRPC-darwin-x64/DiscordRPC.app
          chmod +x dist/DiscordRPC-darwin-x64/DiscordRPC.app/Contents/MacOS/DiscordRPC
          ditto -c -k --sequesterRsrc --keepParent \
            dist/DiscordRPC-darwin-x64/DiscordRPC.app \
            dist/DiscordRPC-darwin-x64.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-x86_64
          path: dist/DiscordRPC-darwin-x64.zip

      - name: Upload Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/DiscordRPC-darwin-x64.zip

  build-macos-arm64:
    name: macOS Build (arm64)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install flask flask-cors

      - name: Rebuild PyInstaller bootloader for arm64
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller/bootloader
          python3 ./waf distclean all --target-arch=64bit-arm
          cd ../..
          pip install ./pyinstaller

      - name: Build Python binary (arm64)
        run: |
          export ARCHFLAGS="-arch arm64"
          pyinstaller backend/app-mac-arm64.spec

      - name: Copy Flask binary to Electron location
        run: |
          mkdir -p build/app-mac-arm64
          cp -R dist/app_mac_arm64/. build/app-mac-arm64/
          chmod +x build/app-mac-arm64/app_mac_bin_arm64

      - name: Clean PyInstaller build folder
        run: rm -rf backend/build dist build/__pycache__

      - name: Install Node dependencies
        working-directory: frontend
        run: npm install

      - name: Build React frontend
        working-directory: frontend
        run: npm run build

      - name: Copy React build to Electron location
        run: |
          mkdir -p resources/app/frontend/build
          cp -r frontend/build/* resources/app/frontend/build/

      - name: Install Electron and Electron Packager
        run: npm install --save-dev electron @electron/packager

      - name: Package Electron App
        run: |
          npx electron-packager . DiscordRPC \
            --platform=darwin --arch=arm64 --out=dist --overwrite \
            --ignore="^/node_modules" \
            --ignore="^/frontend/node_modules" \
            --prune=true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-arm64
          path: dist/DiscordRPC-darwin-arm64/

      - name: Upload Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/DiscordRPC-darwin-arm64/**/*

  build-linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Python & dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip
          pip3 install pyinstaller flask flask-cors

      - name: Build Python binary
        run: pyinstaller backend/app-linux.spec

      - name: Copy Flask binary to Electron location
        run: |
          mkdir -p build/app-linux
          cp dist/app_linux_bin build/app-linux/

      - name: Clean PyInstaller build folder
        run: rm -rf backend/build

      - name: Install Node dependencies
        working-directory: frontend
        run: npm install

      - name: Build React frontend
        working-directory: frontend
        run: npm run build

      - name: Copy React build to Electron location
        run: |
          mkdir -p resources/app/frontend/build
          cp -r frontend/build/* resources/app/frontend/build/

      - name: Install Electron and Electron Packager
        run: npm install --save-dev electron @electron/packager

      - name: Package Electron App
        run: |
          npx electron-packager . DiscordRPC \
            --platform=linux --arch=x64 --out=dist --overwrite \
            --ignore="^/node_modules" \
            --ignore="^/frontend/node_modules" \
            --prune=true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/DiscordRPC-linux-x64/

      - name: Upload Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/DiscordRPC-linux-x64/**/*
